import os
import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from dotenv import load_dotenv
from database import Database
from pdf_generator import PDFGenerator
import io

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

PILL_NAME, PILL_DOSE, HEALTH_NOTE = range(3)

class PillsBot:
    def __init__(self):
        self.db = Database(os.getenv('DATABASE_URL'))
        self.pdf_generator = PDFGenerator()
        
        self.main_keyboard = ReplyKeyboardMarkup([
            [KeyboardButton("üíä –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É")],
            [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")],
            [KeyboardButton("üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç PDF")]
        ], resize_keyboard=True)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–∏–µ–º–∞ –ª–µ–∫–∞—Ä—Å—Ç–≤.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.main_keyboard
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text
        
        if text == "üíä –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–µ—Ç–∫–∏:")
            return PILL_NAME
        elif text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏":
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫—É –æ –≤–∞—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏:")
            return HEALTH_NOTE
        elif text == "üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç PDF":
            await self.generate_report(update, context)
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
                reply_markup=self.main_keyboard
            )
    
    async def pill_name_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞–±–ª–µ—Ç–∫–∏"""
        context.user_data['pill_name'] = update.message.text
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —Ç–∞–±–ª–µ—Ç–∫–∞, 5–º–≥, 2 –∫–∞–ø—Å—É–ª—ã):")
        return PILL_DOSE
    
    async def pill_dose_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ —Ç–∞–±–ª–µ—Ç–∫–∏"""
        pill_name = context.user_data['pill_name']
        dose = update.message.text
        user_id = update.effective_user.id
        
        success = await self.db.add_pill(user_id, pill_name, dose)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ: {pill_name} ({dose})\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                reply_markup=self.main_keyboard
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self.main_keyboard
            )
        
        return ConversationHandler.END
    
    async def health_note_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–º–µ—Ç–∫–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"""
        note = update.message.text
        user_id = update.effective_user.id
        
        success = await self.db.add_health_note(user_id, note)
        
        if success:
            await update.message.reply_text(
                f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n"
                f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
                reply_markup=self.main_keyboard
            )
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=self.main_keyboard
            )
        
        return ConversationHandler.END
    
    async def generate_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –æ—Ç—á–µ—Ç–∞"""
        user_id = update.effective_user.id
        
        await update.message.reply_text("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")
        
        try:
            user_data = await self.db.get_user_data(user_id)
            
            if not user_data['pills'] and not user_data['notes']:
                await update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç—á–µ—Ç–∞.",
                    reply_markup=self.main_keyboard
                )
                return
            
            pdf_bytes = self.pdf_generator.generate_report(user_data, user_id)
            
            pdf_file = io.BytesIO(pdf_bytes)
            pdf_file.name = f"pills_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
            
            await update.message.reply_document(
                document=pdf_file,
                filename=pdf_file.name,
                caption="üìä –í–∞—à –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!",
                reply_markup=self.main_keyboard
            )
            
        except Exception as e:
            logger.error(f"Error generating report: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.main_keyboard
            )
    
    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏"""
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=self.main_keyboard
        )
        return ConversationHandler.END
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(os.getenv('BOT_TOKEN')).build()
        
        pill_conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("üíä –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É"), self.handle_message)],
            states={
                PILL_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.pill_name_handler)],
                PILL_DOSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.pill_dose_handler)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )
        
        note_conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏"), self.handle_message)],
            states={
                HEALTH_NOTE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.health_note_handler)],
            },
            fallbacks=[CommandHandler('cancel', self.cancel)]
        )
        
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(pill_conv_handler)
        application.add_handler(note_conv_handler)
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        application.run_polling()

async def main():
    bot = PillsBot()
    await bot.db.connect()
    
    try:
        bot.run()
    finally:
        await bot.db.close()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())